s = """promi_cb====> Sender: 24:01:01:01:01:01, Receiver: 24:00:00:00:00:00 
udp_server_task=====> recvfrom succ;
I (68062) wifi softAP: Waiting for data
diff =1
diff = 1
serial_num:,137,256,-52,-94,0,48,67,0,4,18,18,17,17,16,18,16,18,16,17,14,18,14,18,13,18,13,19,12,19,12,19,12,20,12,20,12,21,11,21,13,21,13,20,14,20,14,20,14,19,15,17,17,17,17,16,17,15,18,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,12,17,11,19,10,19,9,20,9,20,9,20,9,21,8,21,9,22,7,21,8,21,8,21,8,20,8,20,9,19,10,18,11,19,11,18,12,18,13,18,13,18,14,18,16,18,16,18,16,18,17,

promi_cb====> Sender: 24:01:01:01:01:01, Receiver: 24:00:00:00:00:00 
udp_server_task=====> recvfrom succ;
I (68462) wifi softAP: Waiting for data
diff =1
diff = 1
serial_num:,138,256,-52,-94,0,48,67,0,4,-3,23,-4,24,-4,22,-4,23,-4,22,-5,22,-5,22,-7,21,-7,21,-9,21,-9,21,-9,21,-10,22,-9,22,-10,23,-9,22,-9,23,-8,23,-7,23,-6,23,-5,23,-4,22,-3,23,-2,22,1,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,2,21,2,20,3,20,4,20,5,21,5,21,6,21,7,21,6,20,6,21,5,21,5,21,4,20,4,20,3,20,3,21,2,21,1,21,1,21,0,22,-1,23,-1,22,-2,23,-3,23,-3,25,

promi_cb====> Sender: 24:01:01:01:01:01, Receiver: 24:00:00:00:00:00 
udp_server_task=====> recvfrom succ;
I (68862) wifi softAP: Waiting for data
diff =1
diff = 1
serial_num:,139,256,-47,-94,0,48,67,0,4,-23,1,-23,1,-22,0,-22,0,-21,0,-20,-1,-20,-1,-18,-3,-18,-4,-17,-4,-17,-4,-17,-4,-17,-5,-16,-6,-16,-6,-16,-6,-15,-5,-15,-6,-15,-5,-14,-5,-14,-4,-14,-4,-13,-4,-13,-3,-13,-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-24,-1,-25,0,-25,2,-25,4,-25,4,-26,6,-26,6,-25,7,-25,8,-25,9,-25,9,-24,9,-24,9,-23,9,-24,9,-23,7,-23,7,-23,6,-24,5,-24,5,-24,5,-24,4,-24,3,-25,3,-25,3,-24,2,

promi_cb====> Sender: 24:01:01:01:01:01, Receiver: 24:00:00:00:00:00 
diff =0
Update csi_buf_pre
promi_cb====> Sender: 24:01:01:01:01:01, Receiver: 24:00:00:00:00:00 
udp_server_task=====> recvfrom succ;
I (69232) wifi softAP: Waiting for data
"""

import asyncio

x = ""

async def f():
    global x
    while True:
        yield x  # 产生当前的 x 值
        x = ""    # 重置 x 为空字符串
        await asyncio.sleep(3)

async def g():
    global x
    while True:
        await asyncio.sleep(0.01)
        x += 'g'

async def main(f_gen):
    task_g = asyncio.create_task(g())  # 创建任务运行异步函数 g

    async for result_f in f_gen:
        print(result_f)  # 等待一秒钟，以便 f() 和 g() 交替执行

if __name__ == "__main__":
    f_gen = f()  # 创建 f() 的生成器对象

    asyncio.run(main(f_gen))


